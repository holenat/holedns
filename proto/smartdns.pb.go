// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smartdns.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateDomainReq struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDomainReq) Reset()         { *m = UpdateDomainReq{} }
func (m *UpdateDomainReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDomainReq) ProtoMessage()    {}
func (*UpdateDomainReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9beb4c877430071, []int{0}
}

func (m *UpdateDomainReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDomainReq.Unmarshal(m, b)
}
func (m *UpdateDomainReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDomainReq.Marshal(b, m, deterministic)
}
func (m *UpdateDomainReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainReq.Merge(m, src)
}
func (m *UpdateDomainReq) XXX_Size() int {
	return xxx_messageInfo_UpdateDomainReq.Size(m)
}
func (m *UpdateDomainReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainReq proto.InternalMessageInfo

func (m *UpdateDomainReq) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UpdateDomainReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type UpdateDomainReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDomainReply) Reset()         { *m = UpdateDomainReply{} }
func (m *UpdateDomainReply) String() string { return proto.CompactTextString(m) }
func (*UpdateDomainReply) ProtoMessage()    {}
func (*UpdateDomainReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9beb4c877430071, []int{1}
}

func (m *UpdateDomainReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDomainReply.Unmarshal(m, b)
}
func (m *UpdateDomainReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDomainReply.Marshal(b, m, deterministic)
}
func (m *UpdateDomainReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainReply.Merge(m, src)
}
func (m *UpdateDomainReply) XXX_Size() int {
	return xxx_messageInfo_UpdateDomainReply.Size(m)
}
func (m *UpdateDomainReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateDomainReq)(nil), "notr.v1.api.UpdateDomainReq")
	proto.RegisterType((*UpdateDomainReply)(nil), "notr.v1.api.UpdateDomainReply")
}

func init() { proto.RegisterFile("smartdns.proto", fileDescriptor_b9beb4c877430071) }

var fileDescriptor_b9beb4c877430071 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x4d, 0x2c,
	0x2a, 0x49, 0xc9, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xcb, 0x2f, 0x29,
	0xd2, 0x2b, 0x33, 0xd4, 0x4b, 0x2c, 0xc8, 0x54, 0xb2, 0xe4, 0xe2, 0x0f, 0x2d, 0x48, 0x49, 0x2c,
	0x49, 0x75, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0x0b, 0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62, 0x4b, 0x01,
	0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x02,
	0x09, 0x26, 0xb0, 0x18, 0x53, 0x66, 0x81, 0x92, 0x30, 0x97, 0x20, 0xaa, 0xd6, 0x82, 0x9c, 0x4a,
	0xa3, 0x28, 0x2e, 0x8e, 0x60, 0x90, 0x75, 0x2e, 0x7e, 0xc1, 0x42, 0x7e, 0x5c, 0x3c, 0xc8, 0x0a,
	0x84, 0x64, 0xf4, 0x90, 0x6c, 0xd6, 0x43, 0xb3, 0x56, 0x4a, 0x0e, 0x8f, 0x6c, 0x41, 0x4e, 0xa5,
	0x12, 0x83, 0x13, 0x47, 0x14, 0x9b, 0x3e, 0xd8, 0x0b, 0x49, 0x6c, 0x60, 0xca, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xcf, 0x64, 0x26, 0x86, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SmartDNSClient is the client API for SmartDNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmartDNSClient interface {
	UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error)
}

type smartDNSClient struct {
	cc *grpc.ClientConn
}

func NewSmartDNSClient(cc *grpc.ClientConn) SmartDNSClient {
	return &smartDNSClient{cc}
}

func (c *smartDNSClient) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error) {
	out := new(UpdateDomainReply)
	err := c.cc.Invoke(ctx, "/notr.v1.api.SmartDNS/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartDNSServer is the server API for SmartDNS service.
type SmartDNSServer interface {
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
}

// UnimplementedSmartDNSServer can be embedded to have forward compatible implementations.
type UnimplementedSmartDNSServer struct {
}

func (*UnimplementedSmartDNSServer) UpdateDomain(ctx context.Context, req *UpdateDomainReq) (*UpdateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}

func RegisterSmartDNSServer(s *grpc.Server, srv SmartDNSServer) {
	s.RegisterService(&_SmartDNS_serviceDesc, srv)
}

func _SmartDNS_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartDNSServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notr.v1.api.SmartDNS/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartDNSServer).UpdateDomain(ctx, req.(*UpdateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmartDNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notr.v1.api.SmartDNS",
	HandlerType: (*SmartDNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDomain",
			Handler:    _SmartDNS_UpdateDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smartdns.proto",
}
